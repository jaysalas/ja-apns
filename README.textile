h1. APNS

a gem for the Apple Push Notification Service.

h2. Install

sudo gem install ja-apns

h2. Setup:

Convert your certificate

In Keychain access export your certificate as a p12. Then run the following command to convert it to a .pem

<pre>
  <code>
    openssl pkcs12 -in cert.p12 -out cert.pem -nodes -clcerts
  </code>
</pre>

After you have your .pem file. Set what host, port, certificate file location on the APNS class:

<pre>
  <code>
    sender = APNS::Sender.new({
      # gateway.sandbox.push.apple.com is default
      host: 'gateway.push.apple.com',
      # this is the file you just created
      pem: '/path/to/pem/file',
      # this is also the default. Shouldn't ever have to set this, but just in case Apple goes crazy, you can.
      port: 2195 
    })
  </code>
</pre>

h2. Example:

You will need to create a notification class and provide the following instance methods: 
<code>device_token</code>, <code>alert</code>, <code>badge</code>, <code>sound</code>, <code>other</code>, <code>valid?</code>

<pre>
  <code>
    class MyNotification
      def device_token
        'your token'
      end
      alert
        'Hello iPhone'
      end
      badge
        1
      end
      sound
        'default'
      end
      def other
        {foo: 'bar'}
      end
      def valid?
        true
      end
    end

    sender = APNS::Sender.new

    notification = MyNotification.new
    
    sender.send_notifications([notification])
  </code>
</pre>

h2. Getting your iPhone's device token

After you setup push notification for your application with Apple. You need to ask Apple for you application specific device token.

h3. ApplicationAppDelegate.m

<pre>
  <code>
    - (void)applicationDidFinishLaunching:(UIApplication *)application 
    {    
        // Register with apple that this app will use push notification
        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeAlert | 
          UIRemoteNotificationTypeSound | UIRemoteNotificationTypeBadge)];

        // Your app startup logic...
        return YES;
    }

    - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken 
    {
        // Convert the binary data token into an NSString (see below for the implementation of this function)
        NSString *deviceTokenAsString = stringFromDeviceTokenData(deviceToken);

        // Show the device token obtained from apple to the log
        NSLog(@"deviceToken: %@", deviceTokenAsString);
    }
  </code>
</pre>

h3. stringFromDeviceTokenData function

This snippet comes from "this stackoverflow post's anwser":http://stackoverflow.com/a/1990880/855846.
<pre>
  <code>
    NSString* stringFromDeviceTokenData(NSData *deviceToken)
    {
      const char *data = [deviceToken bytes];
      NSMutableString* token = [NSMutableString string];
      
      for (int i = 0; i < [deviceToken length]; i++) {
        [token appendFormat:@"%02.2hhX", data[i]];
      }
      
      return [[token copy] autorelease];
    }
  </code>
</pre>

For more information on Apple Push Notifications you can see Apple Developer Documentation "here":http://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/IPhoneOSClientImp/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW2.
